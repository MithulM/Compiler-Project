/*
Name: Mithul Manivannan
Date: 10/2/22
Section: CS 4386.001
*/
import java_cup.runtime.*;
import java.util.*;

terminal String CLASS;
terminal String ID;
terminal QUESTION;
terminal AND;
terminal OR;
terminal TRUE;
terminal FALSE;
terminal READ;
terminal PRINT;
terminal PRINTLN;
terminal INC;
terminal DEC;
terminal NOT;
terminal MULTI;
terminal DIV;
terminal PLUS;
terminal MINUS;
terminal EQ;
terminal LT;
terminal GT;
terminal LTE;
terminal GTE;
terminal NE;
terminal IF;
terminal ELSE;
terminal WHILE;
terminal RETURN;
terminal SEMI;
terminal COMMA;
terminal LPAREN;
terminal RPAREN;
terminal LCURLY;
terminal RCURLY;
terminal LSQR;
terminal RSQR;
terminal ASSIGN;
terminal COLON;
terminal FINAL;
terminal CHAR;
terminal INT;
terminal FLOAT;
terminal VOID;
terminal BOOL;
terminal String CHARLIT;
terminal String STRLIT;
terminal String INTLIT;
terminal String FLOATLIT;
terminal UPLUS, UMINUS, CAST;

non terminal Program program;
non terminal Memberdecls memberdecls;
non terminal Fielddecls fielddecls;
non terminal Methoddecls methoddecls;
non terminal Fielddecl fielddecl;
non terminal Methoddecl methoddecl;
non terminal Expr optionalexpr;
non terminal Boolean optionalsemi;
non terminal String type;
non terminal Argdecls argdecllist;
non terminal Argdecls argdecls;
non terminal Argdecl argdecl;
non terminal Stmts stmts;
non terminal Stmt stmt;
non terminal Stmts ifEnd;
non terminal Exprs args;
non terminal ArrayList<Token> readlist;
non terminal ArrayList<Token> printlist;
non terminal ArrayList<Token> printlinelist;
non terminal Name name;
non terminal Expr expr;

// Assignment
precedence left ASSIGN;

// Ternary
precedence left QUESTION;

// Equality
precedence left OR;
precedence left AND;

// Relation
precedence left NE, EQ;
precedence left GT, GTE, LT, LTE;

// MDAS
precedence left PLUS, MINUS;
precedence left MULTI, DIV;

// Type casting
precedence left CAST;

// Unary
precedence left NOT, UPLUS, UMINUS, INC, DEC;

program ::=         CLASS ID:id LCURLY memberdecls:ms RCURLY                     {: RESULT = new Program(id, ms); :};

memberdecls ::=     fielddecl:f memberdecls:mds                                  {: RESULT = new Memberdecls(f, mds); :}
                  | methoddecls:ms                                               {: RESULT = new Memberdecls(ms); :};

fielddecls ::=      fielddecl:f fielddecls:fs                                    {: fs.add(f); RESULT = fs; :}
                  |                                                              {: RESULT = new Fielddecls(); :};

methoddecls ::=     methoddecl:m methoddecls:ms                                  {: ms.add(m); RESULT = ms; :}
                  |                                                              {: RESULT = new Methoddecls(); :};

fielddecl ::=       FINAL type:t ID:id optionalexpr:opex SEMI                    {: RESULT = new Fielddecl(t, id, opex, true); :}
                  | type:t ID:id optionalexpr:opex SEMI                          {: RESULT = new Fielddecl(t, id, opex, false); :}
                  | type:t ID:id LSQR INTLIT:len RSQR SEMI                       {: RESULT = new Fielddecl(t, id, Integer.parseInt(len)); :};

methoddecl ::=      type:t ID:id LPAREN argdecls:as RPAREN LCURLY fielddecls:fs
                    stmts:sts RCURLY optionalsemi:opsemi                         {: RESULT = new Methoddecl(t, id, as, fs, sts, opsemi); :}
                  | VOID ID:id LPAREN argdecls:as RPAREN
                    LCURLY fielddecls:fs stmts:sts RCURLY optionalsemi:opsemi    {: RESULT = new Methoddecl("void", id, as, fs, sts, opsemi); :};

optionalexpr ::=    ASSIGN expr:e                                                {: RESULT = e; :}
                  |                                                              {: RESULT = null; :};

optionalsemi ::=    SEMI                                                         {: RESULT = true; :}
                  |                                                              {: RESULT = false; :};

type ::=            INT                                                          {: RESULT = "int"; :}
                  | FLOAT                                                        {: RESULT = "float"; :}
                  | BOOL                                                         {: RESULT = "bool"; :}
                  | CHAR                                                         {: RESULT = "char"; :};

stmts ::=           stmt:st stmts:sts                                            {: sts.add(st); RESULT = sts; :}
                  |                                                              {: RESULT = new Stmts(); :};

stmt ::=            IF LPAREN expr:e RPAREN LCURLY stmts:s RCURLY ifEnd:el       {: RESULT = new IfStmt(e, s, el); :}
                  | WHILE LPAREN expr:e RPAREN LCURLY stmts:sts RCURLY           {: RESULT = new WhileStmt(e, sts); :}
                  | name:n ASSIGN expr:e SEMI                                    {: RESULT = new NameStmt(n, e); :}
                  | READ LPAREN readlist:rl RPAREN SEMI                          {: RESULT = new FuncStmt("read", rl); :}
                  | PRINT LPAREN printlist:pl RPAREN SEMI                        {: RESULT = new FuncStmt("print", pl); :}
                  | PRINTLN LPAREN printlinelist:pll RPAREN SEMI                 {: RESULT = new FuncStmt("printline", pll); :}
                  | ID:id LPAREN RPAREN SEMI                                     {: RESULT = new FuncCallStmt(id); :}
                  | ID:id LPAREN args:args RPAREN SEMI                           {: RESULT = new FuncCallStmt(id, args); :}
                  | RETURN SEMI                                                  {: RESULT = new ReturnStmt(); :}
                  | RETURN expr:e SEMI                                           {: RESULT = new ReturnStmt(e); :}
                  | name:n INC SEMI                                              {: RESULT = new UnaryStmt(n, "++"); :}
                  | name:n DEC SEMI                                              {: RESULT = new UnaryStmt(n, "--"); :}
                  | LCURLY fielddecls:fs stmts:sts RCURLY optionalsemi:opsemi    {: RESULT = new ScopeStmt(sts); :};

ifEnd ::=           ELSE LCURLY stmts:sts RCURLY                                 {: RESULT = sts; :}
                  |                                                              {: RESULT = null; :};

name ::=            ID:id                                                        {: RESULT = new Name(id); :}
                  | ID:id LSQR expr:e RSQR                                       {: RESULT = new Name(id, e); :};

args ::=            expr:e COMMA args:args                                       {:args.add(e); RESULT = args;:}
                  | expr:e                                                       {:Exprs temp = new Exprs(); temp.add(e); RESULT = temp;:};

argdecls ::=        argdecllist:alst                                             {: RESULT = alst; :}
                  |                                                              {: RESULT = new Argdecls(); :};
argdecllist ::=     argdecl:a COMMA argdecllist:alst                             {: alst.add(a); RESULT = alst; :}
                  | argdecl:a                                                    {: Argdecls temp = new Argdecls(); temp.add(a); RESULT = temp; :};

argdecl ::=         type:t ID:id                                                 {: RESULT = new Argdecl(t, id); :}
                  | type:t ID:id LSQR RSQR                                       {: RESULT = new Argdecl(t, id); :};

readlist ::=        name:n COMMA readlist:rl                                     {: rl.add(0,n); RESULT = rl;:}
                  | name:n                                                       {: ArrayList<Token> temp = new ArrayList<>(); temp.add(n); RESULT = temp;:};

printlist ::=       expr:e COMMA printlist:pl                                    {: pl.add(0,e); RESULT = pl;:}
                  | expr:e                                                       {: ArrayList<Token> temp = new ArrayList<>(); temp.add(e); RESULT = temp;:};

printlinelist ::=   printlist:pl                                                 {: RESULT = pl; :}
                  |                                                              {: RESULT = new ArrayList<Token>(); :};

expr ::=            name:n                                                       {: RESULT = new NameExpr(n); :}
                  | ID:id LPAREN RPAREN                                          {: RESULT = new FuncCallExpr(id); :}
                  | ID:id LPAREN args:args RPAREN                                {: RESULT = new FuncCallExpr(id, args); :}
                  | INTLIT:i                                                     {: RESULT = new TypeExpr(i, 'i'); :}
                  | CHARLIT:c                                                    {: RESULT = new TypeExpr(c, 'c'); :}
                  | STRLIT:s                                                     {: RESULT = new TypeExpr(s, 's'); :}
                  | FLOATLIT:f                                                   {: RESULT = new TypeExpr(f, 'f'); :}
                  | TRUE:t                                                       {: RESULT = new TypeExpr("true", 'b'); :}
                  | FALSE:f                                                      {: RESULT = new TypeExpr("false", 'b'); :}
                  | LPAREN expr:e RPAREN                                         {: RESULT = new SimplifiedExpr(e); :}
                  | NOT expr:e                                                   {: RESULT = new UnaryOpExpr(e, "~"); :}
                  | MINUS expr:e                                                 {: RESULT = new UnaryOpExpr(e, "-"); :} %prec UMINUS
                  | PLUS expr:e                                                  {: RESULT = new UnaryOpExpr(e, "+"); :} %prec UPLUS
                  | LPAREN type:t RPAREN expr:e                                  {: RESULT = new CastExpr(t, e); :} %prec CAST
                  | expr:e1 PLUS expr:e2                                         {: RESULT = new BinaryOpExpr(e1, new BinaryOp("+"), e2); :}
                  | expr:e1 MINUS expr:e2                                        {: RESULT = new BinaryOpExpr(e1, new BinaryOp("-"), e2); :}
                  | expr:e1 MULTI expr:e2                                        {: RESULT = new BinaryOpExpr(e1, new BinaryOp("*"), e2); :}
                  | expr:e1 DIV expr:e2                                          {: RESULT = new BinaryOpExpr(e1, new BinaryOp("/"), e2); :}
                  | expr:e1 GT expr:e2                                           {: RESULT = new BinaryOpExpr(e1, new BinaryOp(">"), e2); :}
                  | expr:e1 LT expr:e2                                           {: RESULT = new BinaryOpExpr(e1, new BinaryOp("<"), e2); :}
                  | expr:e1 GTE expr:e2                                          {: RESULT = new BinaryOpExpr(e1, new BinaryOp(">="), e2); :}
                  | expr:e1 LTE expr:e2                                          {: RESULT = new BinaryOpExpr(e1, new BinaryOp("<="), e2); :}
                  | expr:e1 EQ expr:e2                                           {: RESULT = new BinaryOpExpr(e1, new BinaryOp("=="), e2); :}
                  | expr:e1 NE expr:e2                                           {: RESULT = new BinaryOpExpr(e1, new BinaryOp("<>"), e2); :}
                  | expr:e1 OR expr:e2                                           {: RESULT = new BinaryOpExpr(e1, new BinaryOp("||"), e2); :}
                  | expr:e1 AND expr:e2                                          {: RESULT = new BinaryOpExpr(e1, new BinaryOp("&&"), e2); :}
                  | LPAREN expr:e1 QUESTION expr:e2 COLON expr:e3 RPAREN         {: RESULT = new TernaryOpExpr(e1, e2, e3); :};